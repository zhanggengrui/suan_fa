leetcode 56
给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

解答：
# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
class Solution:
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        intervals.sort(key = lambda x :x.start)
        res = intervals[:1]
        for i in range(1,len(intervals)):
            if intervals[i].start<=res[-1].end:
                res[-1].end = max(res[-1].end,intervals[i].end)
            else:
                res.append(intervals[i])
        return res

===============================================================================================================================
给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

解法：
class Solution:
    def rotateRight(self, head, k):

        if not head or not head.next:
            return head
        h, size = head, 1
        while h.next:
            h = h.next
            size += 1
        h.next = head   #先把原链表连成一个循环链表
        h = head
        for _ in range(size-k % size-1): #在循环链表中找断点
            h = h.next
        head = h.next
        h.next = None

        return head
========================================================================================================
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

例如，上图是一个7 x 3 的网格。有多少可能的路径？
说明：m 和 n 的值均不超过 100。

示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

示例 2:
输入: m = 7, n = 3
输出: 28

解法一（回溯递归）：
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        if m == 0 or n == 0:
            return 0
        i = 0
        j = 0
        count = [] 
        # count = 0        如果count=0，将返回0，使用count=[]，将返回正常值
        self.dfs(m, n, i, j, count)
        return sum(count)
        # return count

    def dfs(self, m, n, i, j, count):
        if i == m - 1 and j == n - 1:
            count.append(1)
            return
        if i + 1 < m:
            self.dfs(m, n, i + 1, j, count)
        if j + 1 < n:
            self.dfs(m, n, i, j + 1, count)
  解法二：（动态规划）
  class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        if m == 0 or n == 0:
            return 0
        mat = [[1 for i in range(n)] for j in range(m)]
        for i in range(1,m):
            for j in range(1,n):
                mat[i][j] = mat[i-1][j]+mat[i][j-1]
        return mat[m-1][n-1]
