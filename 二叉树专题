LEETCODE 102 二叉树层序遍历(直观地打印二叉树）
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [None,None,15,7]
]

解答：
class Solution(object):
    def levelOrder(self, root):
        if root ==None:
            return []
        res = [[root.val]]
        queue= [root]
        while len(queue)!= 0:
            cur = []
            for _ in range(len(queue)):
                cur_root = queue.pop(0)
                if cur_root.left != None:
                    cur.append(cur_root.left.val)
                    queue.append(cur_root.left)
                else:
                    cur.append(None)
                if cur_root.right != None:
                    cur.append(cur_root.right.val)
                    queue.append(cur_root.right)
                else:
                    cur.append(None)
            if cur != []:
                res.append(cur)
        return res
======================================================================================================================
LEETCODE 104
给定一个二叉树，找出其最大深度。
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，
    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

解答：
class Solution(object):
    def maxDepth(self, root):
        if root ==None:
            return 0
        return max(self.maxDepth(root.left) ,self.maxDepth(root.right) )+1
======================================================================================================================
LEETCODE 110
给定一个二叉树，判断它是否是高度平衡的二叉树。

示例 1:
给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:
给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

解法1：
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root ==None:
            return True
        if abs(self.height(root.left) - self.height(root.right))>1:
            return False
        else:
            return self.isBalanced(root.left) and self.isBalanced(root.right)
        
    def height(self,root):
        if root ==None:
            return 0
        return max(self.height(root.left),self.height(root.right))+1
        
解法2：
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.helper(root)[0]
    
    def helper(self,root):
        if root == None:
            return [True , 0]
        l = self.helper(root.left)   # 先收集左、右子树的信息
        r = self.helper(root.right)  
        if abs(l[1] - r[1])>1:       # 再进行对左、右子树信息的整合和判断
            return [False , 0]
        else:
            return [l[0] and r[0], max(l[1],r[1])+1]

======================================================================================================================
LEETCODE 129
给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。
计算从根到叶子节点生成的所有数字之和。
说明: 叶子节点是指没有子节点的节点。

示例 1:
输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.

示例 2:
输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

解法1：
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return 0
        res = []
        cur = []
        self.pre_order(root,cur,res)
        #print(res)
        result = 0
        for i in res:
            result += self.change(i)
        return result
    
    def pre_order(self,root,cur,res):
        cur.append(root.val)
        if root.left == None and root.right == None:
            res.append(cur[:])
            return
        if root.left != None:   
            self.pre_order(root.left,cur,res)
            cur.pop()
        if root.right != None: 
            self.pre_order(root.right,cur,res)
            cur.pop()
    
    def change(self,arr):
        lens = len(arr)
        res = 0
        for i in range(lens):
            res += arr[i]*(10**(lens-i-1))
        return res

解法2：
class Solution(object):
    def sumNumbers(self, root):
        self.res = 0
        father = 0
        self.dfs(root,father)
        return self.res
    
    def dfs(self,root,father):  # father 代表当前节点的父节点所代表的数
        if root == None:
            return 
        cur = father*10 + root.val  # cur 代表当前节点所代表的数
        if root.left == None and root.right == None:  # 如果当前节点是叶子结点，则进行累加
            self.res += cur
            return 
        self.dfs(root.left,cur)         # 否则遍历当前节点的左右子节点，左右子节点的father相应的是cur
        self.dfs(root.right,cur)
注意：
本题目不能使用收集当前节点的左右子树信息的方式来解答，需要在每一个叶子结点处进行累加操作，所以递归函数不返回左右子树的信息
======================================================================================================================
判断一棵树是否是完全二叉树
方法：
按层遍历树：
    （1）如果遇到一个节点，只有右没有左，直接返回False
    （2）如果遇到一个节点只有左，没有右，那么该节点后面遍历到的节点都要是叶节点
解答：
def is_full_tree(root):
    queue = []
    leaf = False
    while len(queue) != 0:
        for _ in range(len(queue)):
            cur = queue.pop(0)
            if cur.left == None and cur.right!=None:
                return False
            if leaf == False and(cur.left ==None or cur.right == None):
                leaf = True
            if leaf == True and (cur.left != None or cur.left != None):
                return False
            if cur.left != None:
                queue.append(cur.left)
            if cur.right != None:
                queue.append(cur.right)
    return True
======================================================================================================================
LEETCODE 222
给出一个完全二叉树，求出该树的节点个数。

示例:

输入: 
    1
   / \
  2   3
 / \  /
4  5 6
输出: 6

解答：
class Solution(object):
    def countNodes(self, root):
        if root == None:
            return 0
        left_height = self.mostleft_height(root.left)     # 求左子树的最左侧节点的深度
        right_height = self.mostleft_height(root.right)   # 求右子树的最左侧节点的深度
        if left_height == right_height:                   # 如果左子树和右子树的深度相同，说明左子树为满二叉树，右子树为完全二叉树
            return (2**left_height + self.countNodes(root.right)) # 满二叉树的节点个数为（2**h - 1）
        else:
            return (2**right_height + self.countNodes(root.left))
      
    def mostleft_height(self,root):   # 求某棵树的最左侧节点的深度（完全二叉树最左侧节点的深度就是整棵树的深度）
        if root ==None:
            return 0
        h = 0
        while root != None:
            h += 1
            root = root.left
        return h
===================================================================================================================
题目：二叉树层序遍历的序列化和反序列化

#序列化
def level_serialize(root,res):
    q = [root]
    res.append(root.val)
    while len(q)!= 0:
        cur = q.pop(0)
        if cur.left != None:
            q.append(cur.left)
            res.append(cur.left.val)
        else:
            res.append(None)
        if cur.right != None:
            q.append(cur.right)
            res.append(cur.right.val)
        else:
            res.append(None)
#反序列化
def level_deserialize(arr):
    root = TreeNode(arr[0])
    nodeQueue = [root]
    front = 0
    index = 1
    while index < len(arr):
        node = nodeQueue[front]
        front = front + 1

        item = arr[index]
        index = index + 1
        if item != None:
            leftNumber = int(item)
            node.left = TreeNode(leftNumber)
            nodeQueue.append(node.left)

        if index >= len(arr): # 因为每次循环index两次加1，所以中间要加一次判断
            break

        item = arr[index]
        index = index + 1
        if item != None:
            rightNumber = int(item)
            node.right = TreeNode(rightNumber)
            nodeQueue.append(node.right)
    return root

=================================================================================================
LEETCODE 124
给定一个非空二叉树，返回其最大路径和。
本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。

示例 1:
输入: [1,2,3]

       1
      / \
     2   3
输出: 6

示例 2:
输入: [-10,9,20,null,null,15,7]
   -10
   / \
  9  20
    /  \
   15   7
输出: 42

解答：
class Solution(object):
    def maxPathSum(self, root):
        self.result = -float('inf')
        self.helper(root)
        return self.result
    
    def helper(self,root):
            if not root:
                return 0
            left = max(0, self.helper(root.left))
            right = max(0, self.helper(root.right))
            self.result = max(self.result, left + right + root.val)
            return max(left, right) + root.val
===================================================================================================
LEETCODE 101
给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
    1
   / \
  2   2
 / \ / \
3  4 4  3

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
    1
   / \
  2   2
   \   \
   3    3
解法1：层序遍历法
class Solution(object):
    def isSymmetric(self, root):
        if root == None:
            return True
        queue = [root]
        while len(queue)!= 0:
            cur = []
            for _ in range(len(queue)):
                cur_root = queue.pop(0)
                if cur_root.left != None:
                    cur.append(cur_root.left.val)
                    queue.append(cur_root.left)
                else:
                    cur.append(None)
                if cur_root.right!=None:
                    cur.append(cur_root.right.val)
                    queue.append(cur_root.right)
                else:
                    cur.append(None)
            if cur !=cur[::-1]:
                return False
        return True
解法2：递归遍历法
class Solution(object):
    def isSymmetric(self, root):
        return self.helper(root,root)
    
    def helper(self,root1,root2):
        if root1 == None and root2 ==None:
            return True
        if root1 ==None or root2 == None:
            return False
        if root1.val!= root2.val:
            return False
        else:
            return self.helper(root1.left,root2.right) and self.helper(root1.right,root2.left)
==================================================================================================================
二叉树morris遍历：
def morris(root):
    cur = root
    while cur != None:
        if cur.left == None:
            cur = cur.right
        else:
            most_right = cur.left
            while most_right.right != None and most_right.right != cur:
                most_right = most_right.right
            if most_right.right == None:  # 第一次来到cur节点
                most_right.right = cur
                cur = cur.left
            elif most_right.right == cur:  # 第二次来到cur节点
                most_right.right = None
                cur = cur.right
解释：
如果一个节点有左子树，那么这个节点将会被访问两次，且第二次访问该节点时，该节点的左子树的所有节点已经被访问完毕
可以通过该节点左子树的最右节点右指针是否指向自己来判断是否是第二次来到该节点。
如果一个节点没有左子树，则只能访问该节点一次
==================================================================================================================
二叉树前序遍历：
def morris(root):
    cur = root
    while cur != None:
        if cur.left == None:
            print(cur.val)   #对于没有左子树的节点，在第一次访问该节点时，就打印
            cur = cur.right
        else:
            most_right = cur.left
            while most_right.right != None and most_right.right != cur:
                most_right = most_right.right
            if most_right.right == None:  # 第一次来到cur节点，对于有左子树的节点，在第一次访问该节点时，就打印
                print(cur.val)
                most_right.right = cur
                cur = cur.left
            elif most_right.right == cur:  # 第二次来到cur节点
                most_right.right = None
                cur = cur.right

==================================================================================================================================
二叉树前序遍历：
def morris(root):
    cur = root
    while cur != None:
        if cur.left == None:
            print(cur.val)   #对于没有左子树的节点，在第一次访问该节点时，就打印
            cur = cur.right
        else:
            most_right = cur.left
            while most_right.right != None and most_right.right != cur:
                most_right = most_right.right
            if most_right.right == None:  # 第一次来到cur节点，
                most_right.right = cur
                cur = cur.left
            elif most_right.right == cur:  # 第二次来到cur节点，对于有左子树的节点，在第二次访问该节点时，打印
                print(cur.val)
                most_right.right = None
                cur = cur.right
===============================================================================================
LEETCODE 236
给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

示例 1:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。

例 2:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
 
说明:
所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。

解答1：
思路：
从根节点开始遍历树。
如果当前节点本身是 p 或 q 中的一个，我们会将变量 mid 标记为 true，并继续搜索左右分支中的另一个节点。
如果左分支或右分支中的任何一个返回 true，则表示在下面找到了两个节点中的一个。
如果在遍历的任何点上，左、右或中三个标志中的任意两个变为 true，这意味着我们找到了节点 p 和 q 的最近公共祖先。

class Solution:
    def __init__(self):
        self.res = None
        self.flag = False
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.helper(root,p,q)
        return self.res
    
    def helper(self,root,p,q):
        if root == None or self.flag == True:
            return  0
        if root ==p or root ==q:
            mid = 1
        else: 
            mid = 0
        left = self.helper(root.left,p,q)
        right= self.helper(root.right,p,q)
        if mid+left+right ==2 :
            self.res = root
            self.flag = True
            return 1
        else:
            if mid+left+right == 0:
                return 0
            if mid+left+right > 0:
                return 1
解答2：
思路：
从根节点开始遍历树。
在找到 p 和 q 之前，将父指针存储在字典中。
一旦我们找到了 p 和 q，我们就可以使用父亲字典获得 p 的所有祖先，并添加到一个称为祖先的集合中。
同样，我们遍历节点 q 的祖先。如果祖先存在于为 p 设置的祖先中，这意味着这是 p 和 q 之间的第一个共同祖先（同时向上遍历），因此这是 LCA 节点。
class Solution:
    def lowestCommonAncestor(self, root, p, q):

        # Stack for tree traversal
        stack = [root]

        # Dictionary for parent pointers
        parent = {root: None}

        # Iterate until we find both the nodes p and q
        while p not in parent or q not in parent:

            node = stack.pop()

            # While traversing the tree, keep saving the parent pointers.
            if node.left:
                parent[node.left] = node
                stack.append(node.left)
            if node.right:
                parent[node.right] = node
                stack.append(node.right)

        # Ancestors set() for node p.
        ancestors = set()

        # Process all ancestors for node p using parent pointers.
        while p:
            ancestors.add(p)
            p = parent[p]

        # The first ancestor of q which appears in
        # p's ancestor set() is their lowest common ancestor.
        while q not in ancestors:
            q = parent[q]
        return q
==============================================================================================================
非递归便利二叉树：
（1）前序遍历：
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root == None:
            return []
        stack = [root]
        res = []
        while len(stack)!=0:
            cur = stack.pop()
            res.append(cur.val)
            if cur.right != None:
                stack.append(cur.right)
            if cur.left != None:
                stack.append(cur.left)
        return res
（2）中序遍历：
class Solution(object):
    def inorderTraversal(self, root):
        if root == None:
            return []
        stack = [root]
        mark = set()
        res = []
        while len(stack) != 0:
            cur = stack.pop()
            if cur not in mark:
                mark.add(cur)
                if cur.right != None:
                    stack.append(cur.right)
                stack.append(cur)
                if cur.left != None:
                    stack.append(cur.left)
            else:
                res.append(cur.val)
        return res
（3）后序遍历：
class Solution(object):
    def inorderTraversal(self, root):
        if root == None:
            return []
        stack = [root]
        d = dict()
        res = []
        while len(stack) != 0:
            cur = stack.pop()
            if cur not in d  :#第一次到该节点
                d[cur] = 1
                stack.append(cur)
                if cur.left != None:
                    stack.append(cur.left)
            elif d[cur] == 1: #第二次到该节点
                d[cur] += 1
                stack.append(cur)
                if cur.right != None:
                    stack.append(cur.right)
            else:             #第三次到该节点
                res.append(cur.val)
        return res

后序遍历方法2：
import collections
class Solution:
    def postorderTraversal(self, root):
        if root == None:
            return []
        stack = [root]
        res = []
        mark = collections.defaultdict(int)
        while stack:
            cur = stack.pop()
            if mark[cur] < 2:
                mark[cur] += 1
                stack.append(cur)
                if cur.right != None:
                    stack.append(cur.right)
                if cur.left != None:
                    stack.append(cur.left)
            elif mark[cur] == 2:
                mark[cur] += 1
                res.append(cur.val)
        return res
