LEETCODE 102 二叉树层序遍历
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

解答：
class Solution(object):
    def levelOrder(self, root):
        if root ==None:
            return []
        res = [[root.val]]
        queue= [root]
        while len(queue)!= 0:
            cur = []
            for _ in range(len(queue)):
                cur_root = queue.pop(0)
                if cur_root.left != None:
                    cur.append(cur_root.left.val)
                    queue.append(cur_root.left)
                if cur_root.right != None:
                    cur.append(cur_root.right.val)
                    queue.append(cur_root.right)
            if cur != []:
                res.append(cur)
        return res
======================================================================================================================
LEETCODE 104
给定一个二叉树，找出其最大深度。
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，
    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

解答：
class Solution(object):
    def maxDepth(self, root):
        if root ==None:
            return 0
        return max(self.maxDepth(root.left) ,self.maxDepth(root.right) )+1
======================================================================================================================
LEETCODE 110
给定一个二叉树，判断它是否是高度平衡的二叉树。

示例 1:
给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:
给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

解法1：
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root ==None:
            return True
        if abs(self.height(root.left) - self.height(root.right))>1:
            return False
        else:
            return self.isBalanced(root.left) and self.isBalanced(root.right)
        
    def height(self,root):
        if root ==None:
            return 0
        return max(self.height(root.left),self.height(root.right))+1
        
解法2：
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.helper(root)[0]
    
    def helper(self,root):
        if root == None:
            return [True , 0]
        l = self.helper(root.left)   # 先收集左、右子树的信息
        r = self.helper(root.right)  
        if abs(l[1] - r[1])>1:       # 再进行对左、右子树信息的整合和判断
            return [False , 0]
        else:
            return [l[0] and r[0], max(l[1],r[1])+1]

======================================================================================================================
LEETCODE 129
给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。
计算从根到叶子节点生成的所有数字之和。
说明: 叶子节点是指没有子节点的节点。

示例 1:
输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.

示例 2:
输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

解法1：
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return 0
        res = []
        cur = []
        self.pre_order(root,cur,res)
        #print(res)
        result = 0
        for i in res:
            result += self.change(i)
        return result
    
    def pre_order(self,root,cur,res):
        cur.append(root.val)
        if root.left == None and root.right == None:
            res.append(cur[:])
            return
        if root.left != None:   
            self.pre_order(root.left,cur,res)
            cur.pop()
        if root.right != None: 
            self.pre_order(root.right,cur,res)
            cur.pop()
    
    def change(self,arr):
        lens = len(arr)
        res = 0
        for i in range(lens):
            res += arr[i]*(10**(lens-i-1))
        return res

解法2：
class Solution(object):
    def sumNumbers(self, root):
        self.res = 0
        father = 0
        self.dfs(root,father)
        return self.res
    
    def dfs(self,root,father):  # father 代表当前节点的父节点所代表的数
        if root == None:
            return 
        cur = father*10 + root.val  # cur 代表当前节点所代表的数
        if root.left == None and root.right == None:  # 如果当前节点是叶子结点，则进行累加
            self.res += cur
            return 
        self.dfs(root.left,cur)         # 否则遍历当前节点的左右子节点，左右子节点的father相应的是cur
        self.dfs(root.right,cur)
注意：
本题目不能使用收集当前节点的左右子树信息的方式来解答，需要在每一个叶子结点处进行累加操作，所以递归函数不返回左右子树的信息
======================================================================================================================
LEETCODE 222
给出一个完全二叉树，求出该树的节点个数。

示例:

输入: 
    1
   / \
  2   3
 / \  /
4  5 6
输出: 6

解答：
class Solution(object):
    def countNodes(self, root):
        if root == None:
            return 0
        left_height = self.mostleft_height(root.left)     # 求左子树的最左侧节点的深度
        right_height = self.mostleft_height(root.right)   # 求右子树的最左侧节点的深度
        if left_height == right_height:                   # 如果左子树和右子树的深度相同，说明左子树为满二叉树，右子树为完全二叉树
            return (2**left_height + self.countNodes(root.right)) # 满二叉树的节点个数为（2**h - 1）
        else:
            return (2**right_height + self.countNodes(root.left))
      
    def mostleft_height(self,root):   # 求某棵树的最左侧节点的深度（完全二叉树最左侧节点的深度就是整棵树的深度）
        if root ==None:
            return 0
        h = 0
        while root != None:
            h += 1
            root = root.left
        return h
===================================================================================================================
题目：二叉树层序遍历的序列化和反序列化

#序列化
def level_serialize(root,res):
    q = [root]
    res.append(root.val)
    while len(q)!= 0:
        cur = q.pop(0)
        if cur.left != None:
            q.append(cur.left)
            res.append(cur.left.val)
        else:
            res.append(None)
        if cur.right != None:
            q.append(cur.right)
            res.append(cur.right.val)
        else:
            res.append(None)
#反序列化
def level_deserialize(arr):
    root = TreeNode(arr[0])
    nodeQueue = [root]
    front = 0
    index = 1
    while index < len(arr):
        node = nodeQueue[front]
        front = front + 1

        item = arr[index]
        index = index + 1
        if item != None:
            leftNumber = int(item)
            node.left = TreeNode(leftNumber)
            nodeQueue.append(node.left)

        if index >= len(arr): # 因为每次循环index两次加1，所以中间要加一次判断
            break

        item = arr[index]
        index = index + 1
        if item != None:
            rightNumber = int(item)
            node.right = TreeNode(rightNumber)
            nodeQueue.append(node.right)
    return root

=================================================================================================
LEETCODE 124
给定一个非空二叉树，返回其最大路径和。
本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。

示例 1:
输入: [1,2,3]

       1
      / \
     2   3
输出: 6

示例 2:
输入: [-10,9,20,null,null,15,7]
   -10
   / \
  9  20
    /  \
   15   7
输出: 42

解答：
class Solution(object):
    def maxPathSum(self, root):
        self.result = -float('inf')
        self.helper(root)
        return self.result
    
    def helper(self,root):
            if not root:
                return 0
            left = max(0, self.helper(root.left))
            right = max(0, self.helper(root.right))
            self.result = max(self.result, left + right + root.val)
            return max(left, right) + root.val
