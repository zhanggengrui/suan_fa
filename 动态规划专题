题目：求两个字符串的最长公公子序列
给定两个字符串，求出他们的最长公共子序列，
如 A = "HELLOWORLD"
   B = "LOOP"
则最长公共子序列是“LOO”:

解题思路：
    采用区间规划，使用二维表记录，mat[i][j]代表截止到字符串A的i位置和字符串B的j位置，
    两个字符串的公共总序列
    转移方程：
        （1） A[i] == B[j]: mat[i][j] = mat[i-1][j-1] + 1
        （2） A[i] != B[j] : mat[i][j] = max(mat[i][j-1],mat[i-1][j])
    边界问题：
    i = 0 or j = 0: mat[i][j] = 0

解答：
def LCS(arr1,arr2):
    mat = [[0 for j in range(len(arr2)+1)] for i in range(len(arr1)+1)]
    for i in range(1,len(arr1)+1):
        for j in range(1,len(arr2)+1):
            if arr1[i-1] == arr2[j-1] : 
                mat[i][j] = mat[i-1][j-1] + 1  # 由于在左上补了一圈0，所以arr的索引比mat索引小1 
            else:
                mat[i][j] = max(mat[i][j-1],mat[i-1][j])
    return mat[-1][-1]
    
============================================================================================================
题目：求两个字符串的最长公共子串
给定两个字符串，求出他们的最长公共子序列，
如 A = "HELLOWORLD"
   B = "LOOP"
则最长公共子序列是“LO”:

解题思路：
    采用区间规划，使用二维表记录，mat[i][j]代表截止到字符串A的i位置和字符串B的j位置，
    两个字符串的公共总序列
    转移方程：
        （1） A[i-1] == B[j-1]: mat[i][j] = mat[i-1][j-1] + 1
        （2） A[i-1] != B[j-1] : mat[i][j] = 0
    边界问题：
    i = 0 or j = 0: mat[i][j] = 0

解答：
def LCString(arr1,arr2):
    mat = [[0 for j in range(len(arr2)+1)] for i in range(len(arr1)+1)]
    res= 0
    for i in range(1,len(arr1)+1):
        for j in range(1,len(arr2)+1):
            if arr1[i-1] == arr2[j-1] :
                mat[i][j] = mat[i-1][j-1] + 1  # 由于在左上补了一圈0，所以arr的索引比mat索引小1
                res = max(res,mat[i][j])
            else:
                mat[i][j] = 0
    return res

    
===================================================================================================
LEETCODE 72 编辑距离
给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。
你可以对一个单词进行如下三种操作：
插入一个字符
删除一个字符
替换一个字符、

示例1:
输入: word1 = "horse", word2 = "ros"
输出: 3
解释: 
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')

示例 2:
输入: word1 = "intention", word2 = "execution"
输出: 5
解释: 
intention -> inention (删除 't')
inention -> enention (将 'i' 替换为 'e')
enention -> exention (将 'n' 替换为 'x')
exention -> exection (将 'n' 替换为 'c')
exection -> execution (插入 'u')

解题思想：
dp[i][j] 代表 word1 到 i 位置转换成 word2 到 j 位置需要最少步数
所以，
（1）当 word1[i] == word2[j]：
      dp[i][j] = dp[i-1][j-1]；
（2）当 word1[i] != word2[j]：
      dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
其中，dp[i-1][j-1] 表示替换操作，dp[i-1][j] 表示删除操作，dp[i][j-1] 表示插入操作


解答一：自底向上
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)
        dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]
        # 第一行
        for j in range(1, n2 + 1):
            dp[0][j] = dp[0][j-1] + 1
        # 第一列
        for i in range(1, n1 + 1):
            dp[i][0] = dp[i-1][0] + 1
        for i in range(1, n1 + 1):
            for j in range(1, n2 + 1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1] ) + 1
        #print(dp)      
        return dp[-1][-1]

解答二：自顶向下
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        if not word1 or not word2:
            return len(word1) + len(word2)
        if word1[0] == word2[0]:
            return self.minDistance(word1[1:], word2[1:])
        else:
            inserted = 1 + self.minDistance(word1, word2[1:])
            deleted = 1 + self.minDistance(word1[1:], word2)
            replace = 1 + self.minDistance(word1[1:], word2[1:])
            return min(inserted, deleted, replace)

====================================================================================================
LEETCODE 5 
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：
输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：
输入: "cbbd"
输出: "bb"

方法1：
class Solution:
    def longestPalindrome(self, s):
        if len(s) <= 1:
            return s
        max_len = s[0]
        dp = [[None for j in range(len(s))] for i in range(len(s))]
        for i in range(len(s)): #长度为1的
            dp[i][i] = True
        for i in range(len(s)-1): #长度为2的
            if s[i] == s[i+1]:
                dp[i][i+1] = True
            else:
                dp[i][i+1] = False
        for lens in range(3,len(s)+1): #长度大于等于3的
            for i in range(len(s)):
                j = i + lens -1
                if j >= len(s):
                    break
                if s[i] == s[j] and dp[i+1][j-1] == True:
                    dp[i][j] = True
                    if j-i+1 >len(max_len):
                        max_len = s[i:j+1]
                else:
                    dp[i][j] = False
        return max_len

方法2 中心扩展法：
class Solution:
    def longestPalindrome(self, s):
        max_left,max_right = 0, 0
        for i in range(len(s)):
            left1,right1 = self.help(s,i,i)   # 奇数长度扩展方式
            left2,right2 = self.help(s,i,i+1) # 偶数长度扩展方式
            if right1 - left1 > max_right-max_left:
                max_left,max_right = left1,right1
            if right2 - left2 > max_right-max_left:
                max_left,max_right = left2,right2 
        return s[max_left:max_right+1]
                 
    def help(self,s,l,r):
        left = l
        right = r
        while left>=0 and right <len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return left+1,right-1
    
===============================================================================
题目LEETCODE 300 ：最长递增子序列
给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:
输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。

#方法一：递归尝试
def help(self,nums,idx,pre,cur):
        if idx == len(nums):
            return cur
        if nums[idx] > pre:
            take = self.help(nums,idx+1,nums[idx],cur+1)
            not_take = self.help(nums,idx+1,pre,cur)
            return max(take,not_take)
        else:
            return self.help(nums,idx+1,pre,cur)

#方法二：动态规划
def getmaxAscendinglen(arr):
    lens = len(arr)
    mat = [ 1 for i in range(lens)]
    maxlen = 1
    for i in range(lens):
        for j in range(i):
            if arr[i] > arr[j] :
                mat[i] = max(mat[j]+1,mat[i])
                if mat[i] > maxlen:
                    maxlen = mat[i]
    return maxlen


if __name__ =="__main__":
    s = "xbcdza"
    print(getmaxAscendinglen(s))
=====================================================================================
题目：最大连续子序列和（leetcode 53）
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6

解答：
class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        '''if len(nums) == 0:
            return None'''
        lens = len(nums)
        dp = [None for i in range(lens)] 
        dp[0] = nums[0]
        for j in range(1,lens):
            dp[j] = max(dp[j-1]+nums[j],nums[j])
        maxs = max(dp)
        return maxs

======================================================================================
# 题目二：挖矿问题
def max_gold(arr1,arr2):
    arr1.insert(0,0) # gold
    arr2.insert(0,0) # man
    len1 = len(arr1)
    mat = [[0 for i in range(11)]for j in range(len1)]
    for i in range(1,len1):
        for j in range(1,11):
            if arr2[i] > j:
                mat[i][j] = mat[i-1][j]
            else:
                mat[i][j] = max(arr1[i]+mat[i-1][j-arr2[i]],mat[i-1][j])
    return mat


if __name__ =="__main__":
    arr1 = [400,500,200,300,350]
    arr2 = [5,5,3,4,3]
    mat = max_gold(arr1,arr2)
    for i in mat:
        print(i)
        

=====================================================================================
题目三：背包问题
# 题目描述，有一个容量为8的背包，要装下4个物品，物品的重量和价值如下，求这个包能装的最大的价值
# w = [2,3,4,5]
# v = [3,4,5,6]

方法一：标准动态规划
#求解能装下的价值最高的
def bag(w,v,n):
    w.insert(0,0)
    v.insert(0,0)
    lens = len(w)
    mat = [[0 for i in range(n+1)]for j in range(lens)]
    for i in range(1,lens):
        for j in range(1,n+1):
            if w[i]>j:
                mat[i][j] = mat[i-1][j]
            else:
                mat[i][j] = max(v[i]+mat[i-1][j-w[i]],mat[i-1][j])
    w.pop(0)
    v.pop(0)
    return mat

#找出到底装了哪些物品
def find_witch(mat,w):
    w.insert(0,0)
    result =[]
    m = len(mat)
    n= len(mat[0])-1
    for i in range(m-1,0,-1):
        if mat[i][n] > mat[i-1][n]: #如果大于，说明这个东西被选中了，调到mat[i-1][n-w[i]]
            result.append(i)
            n = n - w[i]
    return result

方法二：递归尝试：
def find_max(gold,need,man,idx): # 递归尝试版本
    if idx == len(gold):
        return 0
    if man == 0:
        return 0
    if man >= need[idx]:
        take = find_max(gold,need,man-need[idx],idx+1) + gold[idx] #选或不选两种情况进行尝试
        not_take = find_max(gold,need,man,idx+1)
        return max(take,not_take)
    else:
        return find_max(gold,need,man,idx+1)
        
方法三：递归尝试改成动态规划：
def find_max_dp(gold,need,man): #从递归改成的动态规划
    dp = [[None for j in range(len(gold)+1)] for i in range(man+1)]
    for j in range(len(gold)+1):
        dp[0][j] = 0
    for i in range(man+1):
        dp[i][len(gold)] = 0
    for i in range(1,man+1):
        for j in range(len(gold)-1,-1,-1):
            if i >= need[j]:
                dp[i][j] = max(dp[i-need[j]][j+1]+gold[j], dp[i][j+1])
            else:
                dp[i][j] = dp[i][j+1]
    return dp[-1][0]
    
if __name__ =="__main__" :
    w = [2,3,4,5]
    v = [3,4,5,6]
    mat = bag(w,v,8)
    for i in mat:
        print(i)
    print(find_witch(mat,w))

=======================================================================================================
# 题目：求两个字符串的相对编辑距离 （书P222）
def edit_distance(s1,s2):
    if s1 == None and s2 == None:
        return 0
    if s1 == None:
        return len(s2)
    if s2 == None:
        return len(s1)
    s1 = '0' + s1
    s2 = '0' + s2
    mat = [[0 for i in range(len(s2))]for j in range(len(s1))]
    for i in range(len(s2)):
        mat[0][i] = i
    for j in range(len(s1)):
        mat[j][0] = j
    for i in range(1,len(s1)):
        for j in range(1,len(s2)):
            if s1[i] == s2[j]:
                mat[i][j] = min(mat[i-1][j]+1,mat[i][j-1]+1,mat[i-1][j-1])
            else:
                mat[i][j] = min(mat[i-1][j]+1,mat[i][j-1]+1,mat[i-1][j-1]+1)
    s1 = s1[1:]
    for i in mat:
        print(i)
    return mat[-1][-1]

if __name__ =="__main__":
    s1 = 'bciln'
    s2 = 'fciling'
    print(edit_distance(s1,s2))


=========================================================================================
题目寻找最短路径（书P224）
def get_min_path(arr):
    if arr == None:
        return None
    row = len(arr)
    col = len(arr[0])
    mat = [[0 for i in range(col)] for j in range(row)]
    mat[0][0] = arr[0][0]
    for i in range(1,col):
        mat[0][i] = mat[0][i-1]+arr[0][i]
    for j in range(row):
        mat[j][0] = mat[j-1][0] + arr[j][0]
    for i in range(1,row):
        for j in range(1,col):
            mat[i][j] = min (mat[i-1][j],mat[i][j-1])+arr[i][j]
    for i in mat:
        print(i)
    return mat[-1][-1]


if __name__ =="__main__":
    arr=[[1,4,3],[8,7,5],[2,1,5]]
    print(get_min_path(arr))
============================================================================
LEETCODE 64
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小

解法一：递归尝试：
class Solution(object):
    def minPathSum(self, grid):
        return self.walk(grid,0,0)
    
    def walk(self,grid,i, j):
        if i == len(grid)-1 and j == len(grid[0])-1:
            return grid[i][j]
        if i == len(grid)-1:
            return grid[i][j] + self.walk(grid,i,j+1)
        if j == len(grid[0])-1:
            return grid[i][j] + self.walk(grid,i+1,j)
        right = self.walk(grid,i,j+1)
        down = self.walk(grid,i+1,j)
        return grid[i][j] + min(right,down)
解法二：动态规划
class Solution(object):
    def minPathSum(self, grid):
        row = len(grid)
        col = len(grid[0])
        dp = [[None for i in range(col)] for j in range(row)]
        dp[-1][-1] = grid[-1][-1]
        for i in range(col-2,-1,-1):
            dp[row-1][i] = dp[row-1][i+1] + grid[row-1][i]
        for j in range(row-2,-1,-1):
            dp[j][col-1] = dp[j+1][col-1] + grid[j][col-1]
        for i in range(row-2,-1,-1):
            for j in range(col-2,-1,-1):
                dp[i][j] = grid[i][j] + min(dp[i][j+1],dp[i+1][j])
        return dp[0][0]
解法三：动态规划
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        if len(grid) == 0:
            return 0
        
        row = len(grid)
        col = len(grid[0])
        mat = [[0 for i in range(col)] for j in range(row)]   
        mat[0][0] = grid[0][0]
        for i in range(1,row):
            mat[i][0] = mat[i-1][0]+grid[i][0]
        for i in range(1,col):
            mat[0][i] = mat[0][i-1]+grid[0][i]
        for i in range(1,row):
            for j in range(1,col):
                mat[i][j] = grid[i][j]+min(mat[i][j-1],mat[i-1][j])
        return mat[-1][-1]
    
==================================================================================================
LEETCODE 139
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：
输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：
输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：
输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false

解答：
class Solution(object):
    def wordBreak(self, s, wordDict):
        # 求字典中最长字符串
        maxlen=0
        for word in wordDict:
            if len(word)>maxlen:
                maxlen=len(word)
 
        res=[0]*len(s)
        for i in range(len(s)):
            p=i
            while(p>=0 and i-p<=maxlen):
                # 两个条件
                if (res[p]==1 and s[p+1:i+1] in wordDict) or (p==0 and s[p:i+1] in wordDict):
                    res[i]=1
                    break
                p-=1
                
        return res[-1]
============================================================================================
LEETCODE 140
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。
说明：
分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：
输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：
输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：
输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]

解答：
class Solution(object):
    def wordBreak(self, s, wordDict):
        if self.helper1(s,wordDict):
            self.res = []
            self.tmp = []
            self.helper(s, wordDict)
            return self.res
        else:
            return []
    
    def helper1(self,s,wordDict):
        # 求字典中最长字符串
        maxlen=0
        for word in wordDict:
            if len(word)>maxlen:
                maxlen=len(word)
        res=[0]*len(s)
        for i in range(len(s)):
            p=i
            while(p>=0 and i-p<=maxlen):
                # 两个条件
                if (res[p]==1 and s[p+1:i+1] in wordDict) or (p==0 and s[p:i+1] in wordDict):
                    res[i]=1
                    break
                p-=1
        return res[-1]

    def helper(self, s, wordDict):
        if len(s) == 0:
            self.res.append(" ".join(self.tmp))
            return
        for i in range(1, len(s)+1):
            if s[:i] in wordDict:
                self.tmp.append(s[:i])
                self.helper(s[i:], wordDict)
                self.tmp.pop()
================================================================================================
LEETCODE 560
给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :
输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。

解法：
遍历数组每一个位置，对每一个未知计算从0位置到该位置的累加和；
假如到了位置i，累加和是sums，此时在之前的数组里面找，是否存在一个位置：从0位置到该位置的累加和等于（k-sums）
如果存在位置x，则从x+1到位置i的子数组和为k。

class Solution:
    def subarraySum(self, nums, k ) :
        d = dict()
        d[0] = [-1]
        sums = 0
        res = 0
        for i in range(len(nums)):
            sums += nums[i]
            if (sums - k) in d:
                res += len(d[sums - k])
            d[sums] = d.get(sums,[])
            d[sums].append(i)
        return res

===============================================================================================
LEETCODE 518 
给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 

示例 1:
输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

示例 2:
输入: amount = 3, coins = [2]
输出: 0
解释: 只用面额2的硬币不能凑成总金额3。

示例 3:
输入: amount = 10, coins = [10] 
输出: 1

解法一：暴力尝试
class Solution:
    def change(self, amount, coins):
        return self.helper(coins,0,amount)

    #arr： 数组（不变）
    #i：   从第i个位置开始
    #num： 还剩下需要凑的钱
    def helper1(self,arr,i,num):
        if i == len(arr):
            if num ==0:
                return 1
            else:
                return 0
        count = 0
        res = 0
        while num - arr[i]*count >= 0:
            res = res + self.helper(arr,i+1,num-arr[i]*count)
            count += 1
        return res
        
解法二：动态规划
def helper2(self, arr, amount, i, num):
        dp = [[0 for i in range(amount + 1)] for j in range(len(arr)+1)]
        for j in range(amount + 1):
            if j == 0:
                dp[len(arr)][j] = 1
            else:
                dp[len(arr)][j] = 0
        for i in range(len(arr)-1, -1,-1):
            for j in range(0, amount + 1):
                dp[i][j] = 0
                count = 0
                while j - arr[i] * count >= 0:
                    dp[i][j] += dp[i+1][j - arr[i] * count]
                    count += 1
        return dp[0][-1]
        
 解法三：动态规划（优化）
 def helper3(self, arr, amount, i, num):
        dp = [[0 for i in range(amount + 1)] for j in range(len(arr)+1)]
        for j in range(amount + 1):
            if j == 0:
                dp[len(arr)][j] = 1
            else:
                dp[len(arr)][j] = 0
        for i in range(len(arr)-1, -1,-1):
            for j in range(0, amount + 1):
                if j -arr[i] >= 0:
                    dp[i][j] = dp[i+1][j] + dp[i][j-arr[i]]
                else:
                    dp[i][j] = dp[i+1][j]
        return dp[0][-1]
        
 解法四：动态规划（空间优化）
 def helper4(self,arr,amount,i,num):
        dp = [0 for i in range(amount+1)]
        dp[0] = 1
        for a in arr:
            for j in range(a,amount+1):
                dp[j] = dp[j]+dp[j-a]
        return dp[-1]
=============================================================================================================-==
LEETCODE 115 
给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。
一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

示例 1:
输入: S = "rabbbit", T = "rabbit"
输出: 3
解释:
如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。
(上箭头符号 ^ 表示选取的字母)
rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^

示例 2:
输入: S = "babgbag", T = "bag"
输出: 5
解释:
如下图所示, 有 5 种可以从 S 中得到 "bag" 的方案。 
(上箭头符号 ^ 表示选取的字母)
babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^

解法1：暴力尝试
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        return self.helper1(s, 0, t, 0)
        #return self.helper2(s,t)
        #return self.helper3(s,t)
        
    def helper1(self, s, i, t, target):
        if target == len(t) and i == len(s) :
            return 1
        if target == len(t):
            return 1
        if i == len(s):
            return 0
        res = 0
        if s[i] == t[target]:
            res = self.helper(s, i + 1, t, target + 1) + self.helper(s, i + 1, t, target)
        else:
            res = self.helper(s, i + 1, t, target)
        return res
        
解法2：动态规划（时间优化）：
def helper2(self,s,t):
        dp = [[0 for i in range(len(t)+1)]for j in range(len(s)+1)]
        for i in range(0,len(s)+1):
            dp[i][-1] = 1
        for i in range(len(s)-1,-1,-1):
            for j in range(0,min(i+2,len(t))):
                if s[i] == t[j]:
                    dp[i][j] = dp[i+1][j+1]+dp[i+1][j]
                else:
                    dp[i][j] = dp[i+1][j]
        return dp[0][0]
解法三：（空间优化）
def helper3(self,s,t):
        dp = [0 for _ in range(len(t)+1)]
        dp[-1] = 1
        for i in range(len(s)-1,-1,-1):
            for j in range(0,min(i+2,len(t))):
                if s[i] == t[j]:
                    dp[j] = dp[j+1]+dp[j]
                else:
                    dp[j] = dp[j]
        return dp[0]
========================================================================================================================
LEETCODE 213 
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。
同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:
输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

示例 2:
输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

解答：
class Solution(object):
    def rob(self, nums):
        if len(nums) ==0:
            return 0
        if len(nums) == 1:
            return nums[0]
        return max(self.help(nums[1:]),self.help(nums[:-1])) #第一个和最后一个只能保留一个
    
    def help(self,nums):
        if len(nums) == 1:
            return nums[0]
        dp = [0 for _ in range(len(nums))]
        dp[0] = nums[0]
        dp[1] = max(nums[0],nums[1])   # 这个是一个易错点
        for i in range(2,len(nums)):
            dp[i] = max(dp[i-2]+nums[i] , dp[i-1])
        return dp[-1]
