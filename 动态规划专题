#题目一：求两个字符串的最长公共子串
def get_max_sub_str(arr1,arr2):
    res = ''
    len1 = len(arr1)
    len2 = len(arr2)
    mat = [[None for i in range(len1+1)]for j in range(len2+1)]
    for i in range(len1+1):
        mat[0][i] = 0
    for j in range(len2+1):
        mat[j][0] = 0
    maxs = 0
    maxindex = 0
    for i in range(0,len1+1):
        for j in range(0,len2+1):
            if arr1[i-1] == arr2[j-1]:
                mat[i][j] = mat[i-1][j-1]+1
                if mat[i][j] > maxs:
                    maxs = mat[i][j]
                    maxindex = i
            else:
                mat[i][j] = 0
    i = maxindex - maxs
    while i <maxindex:
        res = res+arr1[i]
        i +=1

    return res


if __name__ =="__main__":
    arr1 = 'abccade'
    arr2 = 'dgcadde'
    print(get_max_sub_str(arr1,arr2))
    
======================================================================================

题目 ：求字符串里的最长回文子串
class Solution2(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return None
        lens=len(s)
        if lens<2:
            return s
        maxlen=0
        start=0
        dp=[[0]*lens]*lens
 
        #step 1
        for i in range(lens):
            dp[i][i]=True                 #长度为1的
            if i<lens-1 and s[i]==s[i+1]: #长度为2的
                dp[i][i+1]=1
                start=i
                maxlen=2
 
        #step 2 
        for i in range(3,lens+1):         # 长度大于等于3的
            for j in range(0,lens-i+1):   
                r=j+i-1
                if dp[j+1][r-1] and s[j]==s[r]:
                    dp[j][r]=1
                    maxlen=i
                    start=j
        #step 3
        if maxlen>=2:
            return s[start:start+maxlen]
        return None
        
===============================================================================

# 题目二：挖矿问题
def max_gold(arr1,arr2):
    arr1.insert(0,0) # gold
    arr2.insert(0,0) # man
    len1 = len(arr1)
    mat = [[0 for i in range(11)]for j in range(len1)]
    for i in range(1,len1):
        for j in range(1,11):
            if arr2[i] > j:
                mat[i][j] = mat[i-1][j]
            else:
                mat[i][j] = max(arr1[i]+mat[i-1][j-arr2[i]],mat[i-1][j])
    return mat


if __name__ =="__main__":
    arr1 = [400,500,200,300,350]
    arr2 = [5,5,3,4,3]
    mat = max_gold(arr1,arr2)
    for i in mat:
        print(i)
        

=====================================================================================
题目三：背包问题
# 题目描述，有一个容量为8的背包，要装下4个物品，物品的重量和价值如下，求这个包能装的最大的价值
# w = [2,3,4,5]
# v = [3,4,5,6]

#求解能装下的价值最高的
def bag(w,v,n):
    w.insert(0,0)
    v.insert(0,0)
    lens = len(w)
    mat = [[0 for i in range(n+1)]for j in range(lens)]
    for i in range(1,lens):
        for j in range(1,n+1):
            if w[i]>j:
                mat[i][j] = mat[i-1][j]
            else:
                mat[i][j] = max(v[i]+mat[i-1][j-w[i]],mat[i-1][j])
    w.pop(0)
    v.pop(0)
    return mat

#找出到底装了哪些物品
def find_witch(mat,w):
    w.insert(0,0)
    result =[]
    m = len(mat)
    n= len(mat[0])-1
    for i in range(m-1,0,-1):
        if mat[i][n] > mat[i-1][n]: #如果大于，说明这个东西被选中了，调到mat[i-1][n-w[i]]
            result.append(i)
            n = n - w[i]
    return result

if __name__ =="__main__" :
    w = [2,3,4,5]
    v = [3,4,5,6]
    mat = bag(w,v,8)
    for i in mat:
        print(i)
    print(find_witch(mat,w))



