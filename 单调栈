单调栈的维护是 O(n) 级的时间复杂度，因为所有元素只会进入栈一次，并且出栈后再也不会进栈了。
单调栈的性质：
1.单调栈里的元素具有单调性
2.元素加入栈前，会在栈顶端把破坏栈单调性的元素都删除
3.使用单调栈可以找到元素向左遍历第一个比他小的元素，也可以找到元素向左遍历第一个比他大的元素。

当单调栈中的元素是单调递增的时候，根据上面我们从数组的角度阐述单调栈的性质的叙述，可以得出：
（1）.当a > b 时，则将元素a插入栈顶，新的栈顶则为a
（2）.当a < b 时，则将从当前栈顶位置向前查找（边查找，栈顶元素边出栈），直到找到第一个比a小的数，停止查找，将元素a插入栈顶
    （在当前找到的数之后，即此时元素a找到了自己的“位置”）

==============================================================================================================
LEETCODE 84
给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。
求在该柱状图中，能够勾勒出来的矩形的最大面积。

以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。
图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。

示例:
输入: [2,1,5,6,2,3]
输出: 10

解答：
class Solution:
    def largestRectangleArea(self, heights):
        heights.append(0)                                                          # 加一个0，这样就可以触发最后的递增栈
        stack = []
        max_size = 0
        i = 0
        while i <len(heights):
            if len(stack) == 0 or heights[i] >= heights[stack[-1]]:
                stack.append(i)
                i+=1
            else:
                peak_index = stack.pop()
                if len(stack) == 0:
                    max_size  = max(max_size,i*heights[peak_index])
                else:
                    max_size = max(max_size,(i-stack[-1]-1)*heights[peak_index])   # stack[-1]是左面第一个比peak_index的数
        return max_size
===========================================================================================================
LEETCODE 739
根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。
例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。

解答：
class Solution:
    def dailyTemperatures(self, T):
        stack = []
        res = [0 for _ in range(len(T))]
        for i in range(len(T)):
            if len(stack) == 0 or T[stack[-1]] >= T[i]:
                stack.append(i)
            else:
                while len(stack)!= 0 and T[stack[-1]] < T[i]:
                    idx = stack.pop()
                    res[idx] = i - idx
                stack.append(i)
        return res
