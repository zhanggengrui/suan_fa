题目一：在一个二维的字符盘上找到给定的字符串，如果找到，输出True
def find1(board,word,mat):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == word[0]:
                helper1(board,word,i,j,mat)

def helper1(board,word,x,y,mat):
    board[x][y] = " "
    mat[x][y] = word[0]
    if len(word) == 1:
        print(True)
        print(mat)
        return
    if x-1>=0 and x-1 <len(board) and y >=0 and y<len(board[0]) and board[x-1][y] == word[1]:
        helper1(board, word[1:], x-1, y, mat)
        return
    if x+1>=0 and x+1 <len(board) and y >=0 and y<len(board[0]) and board[x+1][y] == word[1]:
        helper1(board, word[1:], x+1, y, mat)
        return
    if x >=0 and x<len(board) and y-1 >=0 and y-1 < len(board[0]) and board[x][y-1] ==word[1]:
        helper1(board,word[1:],x,y-1,mat)
        return
    if x>=0 and x<len(board) and y+1>= 0 and y+1 <len(board[0]) and board[x][y+1] == word[1]:
        helper1(board,word[1:],x,y+1,mat)
        return
    board[x][y] = word[0]
    mat[x][y]=0
    return

def find2(board,word,mat):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == word[0]:
                if helper2(board,word,i,j,mat):
                    return True

def helper2(board,word,x,y,mat):
    if len(word) ==0 :
        return True
    if x>0 and x<len(board) and y>=0 and y<len(board[0]):
        if board[x][y] == word[0]:
            board[x][y] = " "
            if helper2(board,word[1:],x-1,y,mat):
                return True
            if helper2(board,word[1:],x+1,y,mat):
                return True
            if helper2(board,word[1:],x,y-1,mat):
                return True
            if helper2(board,word[1:],x,y+1,mat):
                return True
            board[x][y] = word[0]
            return False
        return False


if __name__ == "__main__":
    board = [['a','c','r','k','l'],
             ['l','w','o','e','i'],
             ['a','f','d','e','c'],
             ['k','e','e','w','e'],
             ['o','d','r','o','s']]
    mat = [[0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0]]
    print(find2(board,'week',mat))
    
    
=================================================================================================================
    
    
题目二：全排列问题
#题目描述：给出一个序列，返回它的全排列
def quanpaiie_1(arr,result):
    if len(arr) == 0:
        print(result)
        return
    for i in range(len(arr)):
        result += arr[i]
        quanpaiie_1(arr[:i]+arr[i+1:],result)
        result.pop()    # 回溯后把原来的拿出来

def quanpaiie_2(arr,result):
    if len(arr) == 0:
        print(result)
        return
    for i in range(len(arr)):
        newresult = result + arr[i]  # 建立一个新的列表对象
        quanpaiie_2(arr[:i]+arr[i+1:],newresult)
        
def quanpaiie_3(arr,result):
    if len(arr) == 0:
        print(result)
        return
    for i in range(len(arr)):
        if arr[i] in arr[:i]:   #判断是否在之前已经排过，如果排过则忽略它
            continue
        else:
            newresult = result + arr[i]  # 建立一个新的列表对象
            quanpaiie_2(arr[:i]+arr[i+1:],newresult)


if __name__ =="__main__":
    arr = "abc"
    quanpaiie_1(arr,[])
    quanpaiie_2(arr,"")
    arr2 = "aab"
    quanpailie_3(arr2,"")   #去掉全排列中重复的
   
=================================================================================================================
给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:
输入:
11110
11010
11000
00000
输出: 1

示例 2:
输入:
11000
11000
00100
00011
输出: 3

解答：
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if grid == None or len(grid) == 0:
            return 0
        row = len(grid)
        col = len(grid[0])
        nums = 0
        for i in range(row):
            for j in range(col):
                if grid[i][j] == "1":
                    nums += 1
                    self.inject(grid,i,j)
        return nums
    
    def inject(self,grid,i,j):
        if grid[i][j] == "1":
            grid[i][j] = "2"
        else:
            return
        if i>0 :
            self.inject(grid,i-1,j)
        if i<len(grid)-1:
            self.inject(grid,i+1,j)
        if j > 0:
            self.inject(grid,i,j-1)
        if j < len(grid[0])-1:
            self.inject(grid,i,j+1)
