# 建堆
def heapinsert(arr,index):
    while arr[index] > arr[int((index-1)/2)]:
        arr[index],arr[int((index-1)/2)]=arr[int((index-1)/2)],arr[index]
        index = int((index-1)/2)

# index位置值改变了，要从index位置开始进行调整，
def heapify(arr,index,heapsize):
    left = 2*index+1    # 先要有左孩子
    while left<heapsize:  # 如果左孩子越界了，说明已经是叶节点
        right = left + 1     # 可能存在右孩子
        if right<heapsize and arr[left]<arr[right]:
            largest = right         #如果右孩子存在，且比左孩子大，则记录右节点
        else:
            largest = left          # 否则就是左节点大
        if arr[index] < arr[largest]:
            largest = largest
        else:
            largest = index
        if largest == index:        # 如果该index节点比左右孩子的值都大，则停止调整break
            break
        else:
            arr[largest],arr[index] = arr[index],arr[largest]        #将index与较大的孩子交换，再从交换的孩子处继续调整
            index = largest
            left = index*2+1
=========================================================================================================================
LEETCODE 215
在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:
输入: [3,2,1,5,6,4] 和 k = 2
输出: 5

示例 2:
输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4

解答：
import heapq
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        h = []
        i= 0
        while i<k:
            heapq.heappush(h,nums[i])
            i += 1
        while i <len(nums):
            if nums[i] > h[0]:
                heapq.heappushpop(h,nums[i])
            i += 1
        return h[0]


=========================================================================================================================
LEETCODE 703
设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。
你的 KthLargest 类需要一个同时接收整数 k 和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。

示例:

int k = 3;
int[] arr = [4,5,8,2];
KthLargest kthLargest = new KthLargest(3, arr);
kthLargest.add(3);   // returns 4
kthLargest.add(5);   // returns 5
kthLargest.add(10);  // returns 5
kthLargest.add(9);   // returns 8
kthLargest.add(4);   // returns 8

解答：
# 维护一个最小堆，堆的元素个数为常量 k，新加入一个元素和堆顶比较，如果比堆顶元素小，丢弃，否则删除堆顶元素，插入新元素。
import heapq
class KthLargest(object):
    def __init__(self, k, nums):
        self.k = k
        self.h = nums[:]
        heapq.heapify(self.h)
        while len(self.h) > k:
            heapq.heappop(self.h)           
          
    def add(self, val):
        if len(self.h)<self.k:
            heapq.heappush(self.h,val)
        elif val > self.h[0]:
            heapq.heappushpop(self.h , val)
        return self.h[0]
==========================================================================================================
LEETCODE 502
假设 力扣（LeetCode）即将开始其 IPO。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 k 个不同的项目。帮助 力扣 设计完成最多 k 个不同项目后得到最大总资本的方式。
给定若干个项目。对于每个项目 i，它都有一个纯利润 Pi，并且需要最小的资本 Ci 来启动相应的项目。最初，你有 W 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。
总而言之，从给定项目中选择最多 k 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。

示例 1:
输入: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].
输出: 4
解释:
由于你的初始资本为 0，你尽可以从 0 号项目开始。
在完成后，你将获得 1 的利润，你的总资本将变为 1。
此时你可以选择开始 1 号或 2 号项目。
由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。
因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。

解答：
import heapq
class Solution(object):
    def findMaximizedCapital(self, k, W, Profits, Capital):
    "建立一个小根堆，按照Capital排序；再建一个大根堆，按照Profits排序"
        nodes_small = []
        nodes_big = []
        for i in range(len(Profits)):
            nodes_small.append((Capital[i],Profits[i]))
        heapq.heapify(nodes_small)
        for i in range(k):
            while len(nodes_small)>0:
                small = heapq.heappop(nodes_small)
                if small[0] <= W:
                    heapq.heappush(nodes_big,(-small[1],-small[0]))
                else:
                    heapq.heappush(nodes_small,small)
                    break
            if len(nodes_big) == 0:
                return W
            else:
                big = heapq.heappop(nodes_big)
                W -= big[0]
        return W
