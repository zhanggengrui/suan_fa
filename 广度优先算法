广度优先搜索模板：
def bfs(初始位置):
    queue = [初始位置]
    mark = set() #mark = mat[][]
    mark.add(初始位置)
    # 步数 = 0
    while (len(queue)) != 0:
        for _ in range(len(queue)):
            当前位置 = queue.pop(0)
            if 当前位置 == 目标位置:
                return 步数/True
            for 所有当前位置的下一个位置:
                if 下一个位置没有越界 and 下一个位置 not in mark:
                    stack.append(下一个位置)  # 每一个加入stack的下一个位置，必须是之前没有访问过的
                    mark(下一个位置)
        步数 += 1
    return False
   
==================================================================================================================
LEETCODE 301 
删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。

说明: 输入可能包含了除 ( 和 ) 以外的字符。

示例 1:
输入: "()())()"
输出: ["()()()", "(())()"]

示例 2:
输入: "(a)())()"
输出: ["(a)()()", "(a())()"]

示例 3:
输入: ")("
输出: [""]

解答：
def removeInvalidParentheses(self, s):
        res = []
        flag = False
        mark = set()
        queue = [s]
        mark.add(s)
        while len(queue) != 0:
            for _ in range(len(queue)): # 按层遍历，每一层是一步的所有可能
                cur = queue.pop(0)
                if self.is_valid(cur):  # 该层中已经有符合的了
                    res.append(cur)
                    flag = True         # 标记一下，不用再想下面的层进行遍历了
                if flag == False:
                    for i in range(len(cur)):
                        if cur[i] in ["(",")"] and cur[:i]+cur[i+1:] not in mark:  # 当前位置的每一个下一个位置在加入queue之前一定要看一下是否访问股哟
                            queue.append(cur[:i]+cur[i+1:])
                            mark.add(cur[:i]+cur[i+1:])  # 加入queue后，标记访问过了
            if flag:
                break
        return res

    def is_valid(self,s):
        cnt = 0
        for i in s:
            if i =="(":
                cnt+=1
            elif i==")":
                cnt-=1
            if cnt<0:
                return False
        return cnt == 0
