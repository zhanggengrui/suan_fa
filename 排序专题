# 归并排序
def merge_sort(list):
    if len(list) < 2:
        return
    mid = len(list)//2
    left_list = list[:mid]
    right_list = list[mid:]
    merge_sort(left_list)
    merge_sort(right_list)
    left_ptr = 0
    right_ptr = 0
    cur = 0
    while left_ptr < len(left_list) and  right_ptr < len(right_list):
        if left_list[left_ptr] <= right_list[right_ptr]:
            list[cur] = left_list[left_ptr]
            left_ptr += 1
        else:
            list[cur] = right_list[right_ptr]
            right_ptr += 1
        cur += 1
    while left_ptr < len(left_list):
        list[cur] = left_list[left_ptr]
        left_ptr += 1
        cur += 1
    while right_ptr < len(right_list):
        list[cur] = right_list[right_ptr]
        right_ptr += 1
        cur += 1

if __name__ =="__main__":
    list = [2,3,1,4,3,0]
    merge_sort(list)
    print(list)
    
    
# 冒泡排序
def bubble_sort(arr):
    lens = len(arr)
    for i in range(lens-1,-1,-1):
        flag = True                   # 用flag判断是否进行了转换操作
        for j in range(i):
            if arr[j] > arr[j+1]:
                arr[j],arr[j+1] = arr[j+1],arr[j]
                flag = False          # 当进行了转换操作时，flag变成了False
        if flag == True:
            break
    return arr

if __name__ =="__main__":
    arr = [3,4,2,8,9,5,1]
    print(bubble_sort(arr))


# 选择排序
def select_sort(arr):
    lens = len(arr)
    for i in range(lens):
        min = i
        for j in range(i+1,lens):
            if arr[min] > arr[j]:
                min = j
        arr[i],arr[min] = arr[min],arr[i]
    return arr

if __name__ =="__main__":
    arr = [3,4,2,8,9,5,1]
    print(select_sort(arr))
