题目：利用固定长度数组首先栈
class Array_Stack():
    def __init__(self,size):
        self.index = 0
        self.arr = []
        self.size = size

    def built_stack(self):
        if self.size <= 0:
            return False
        else:
            self.arr = [None for _ in range(self.size)]

    def peak(self):
        if self.index == 0:
            print("is EMPTY")
            return False
        else:
            return self.arr[self.index-1]

    def pop(self):
        if self.index == 0:
            print("is EMPTY")
            return False
        else:
            self.index -= 1
            return self.arr[self.index]
    def push(self,x):
        if self.index == self.size:
            print("is FULL")
            return False
        else:
            self.arr[self.index] = x
            self.index += 1
================================================================================================
题目：利用固定长度数组实现队列
class Array_Queue():
    def __init__(self,size):
        self.start = 0
        self.end = 0
        self.arr = []
        self.cur_size = 0
        self.size = size

    def built_stack(self):
        if self.size <= 0:
            return False
        else:
            self.arr = [None for _ in range(self.size)]

    def pop(self):
        if self.cur_size == 0:
            print("is EMPTY")
            return False
        else:
            res = self.arr[self.start]
            self.start = (self.start + 1) % self.size
            self.cur_size -=1
            return res

    def push(self,x):
        if self.cur_size == self.size:
            print("is FULL")
            return False
        else:
            self.arr[self.end] = x
            self.end = (self.end+1)%self.size
            self.cur_size += 1
================================================================================================
题目：有效的括号（leetcode 20）
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

算法：
初始化栈 S。
一次处理表达式的每个括号。
如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。
如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。
如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效

解答：
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """

        # The stack to keep track of opening brackets.
        stack = []
        d = {")":"(" , "]":"[" , "}":"{"}
        for chr in s:
            if chr in d:
                if len(stack) == 0:
                    top = "_"
                else:
                    top = stack.pop()
                if d[chr] != top:
                    return False
            else:
                stack.append(chr)
        if len(stack) == 0:
            return True
        else :
            return False
=============================================================================================================
LEETCODE 150
根据逆波兰表示法，求表达式的值。
有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：
整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
示例 1：
输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9

示例 2：
输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: (4 + (13 / 5)) = 6

示例 3：
输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

解答：
class Solution(object):
    def evalRPN(self, tokens):
        stack = []
        help = ["+", "-", "*", "/"]
        for item in tokens:
            if item in help:
                num2 = stack.pop()
                num1 = stack.pop()
                if item == "+":
                    stack.append(num1 + num2)
                elif item == "-":
                    stack.append(num1 - num2)
                elif item == "*":
                    stack.append(num1 * num2)
                elif item == "/":
                    stack.append(int(num1 / num2))
            else:
                stack.append(int(item))
        return stack.pop()
