LEETCODE 79 
给定一个二维网格和一个单词，找出该单词是否存在于网格中。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

解答：
class Solution:
    def exist(self, board, word):
        mat = [[0 for i in range(len(board[0]))] for j in range(len(board))]
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    if self.dfs(mat, board, word[1:], i, j):
                        return True
        return False

    def dfs(self, mat, board, word, i, j):
        if len(word) == 0:
            return True
        mat[i][j] = 1   # 深度优先收缩路径，要在这里先发位置占上
        if i-1>=0 and mat[i-1][j] == 0 and board[i-1][j] == word[0]:
            if self.dfs(mat,board,word[1:],i-1,j):
                return True
        if i+1<len(board) and mat[i+1][j] == 0 and board[i+1][j] == word[0] :
            if self.dfs(mat,board,word[1:],i+1,j):
                return True
        if j-1 >=0 and mat[i][j-1] ==0 and board[i][j-1] == word[0] :
            if self.dfs(mat,board,word[1:],i,j-1):
                return True
        if j+1 <len(board[0]) and mat[i][j+1] ==0 and board[i][j+1] == word[0] :
            if self.dfs(mat,board,word[1:],i,j+1):
                return True
        mat[i][j] = 0 # 回溯回来后，把这个位置释放掉
        return False

============================================================================================
#题目描述：寻找面积最大的岛屿（P116）
class area():                  # 设置一个类对象用来进行存储
    def __init__(self):
        self.cur = 0
        self.maxs = 0

def max_area(mat,a):
    row = len(mat)
    col = len(mat[0])
    for i in range(row):
        for j in range(col):
            if mat[i][j] == 1:
                a.cur = 0      #每次遍历之前要将a.cur重置为0
                dfs(mat,i,j,a)
                if a.cur>a.maxs:
                    a.maxs = a.cur
    return a.maxs

def dfs(mat,x,y,a):
    mat[x][y] = 2             #将遍历过的位置标记，以防重新遍历
    a.cur +=1
    if x>0 and mat[x-1][y] ==1:
        dfs(mat,x-1,y,a)
    if x<len(mat)-1 and mat[x+1][y] == 1:
        dfs(mat,x+1,y,a)
    if y>0 and mat[y-1][x] == 1:
        dfs(mat,x,y-1,a)
    if y<len(mat[0])-1 and mat[x][y+1] == 1:
        dfs(mat,x,y+1,a)
    return

if __name__ =="__main__":
    a = area()
    mat = [[0,0,0,0,1,1,0],
           [0,1,1,0,1,1,0],
           [0,1,1,0,0,0,0],
           [0,0,1,0,0,1,1],
           [0,0,0,0,0,0,0],
           [0,0,1,1,0,0,0],
           [0,0,0,1,0,0,1]]
    print(max_area(mat,a))
    for i in mat:
        print(i)
 ============================================================================================
 #书P257
 class Test():
    def __init__(self,arr):
        self.arr = arr
        self.n = len(arr)
        self.visited = [False]*self.n
        self.graph = [[None for i in range(self.n)] for j in range(self.n)]
        self.combination = ''
        self.sets = set()

    def creat_graph(self):
        for i in range(self.n):
            for j in range(self.n):
                if i == j :
                    self.graph[i][j] = 0
                else:
                    self.graph[i][j] = 1
        self.graph[3][5] = 0
        self.graph[5][3] = 0
        for i in range(self.n):
            self.dfs(i)

    def dfs(self,start):
        self.visited[start] = True
        self.combination = self.combination + str(self.arr[start])
        if len(self.combination) == self.n:
            if self.combination[2] !="4":
                self.sets.add(self.combination)
                self.combination = self.combination[:-1]
                self.visited[start] = False
                return                  # 如果这边只有一个return，那么最后一个无法取消标记，因为返回后再次直接进入循环
        for i in range(self.n):
            if self.visited[i] == False and self.graph[start][i] == 1:
                self.dfs(i)
        self.combination = self.combination[:-1]
        self.visited[start] = False
        return

    def print_sets(self):
        print(len(self.sets))
        for strs in self.sets:
            print(strs)


if __name__ =="__main__":
    arr = [1,2,2,3,4,5]
    t = Test(arr)
    t.creat_graph()
    t.print_sets()
    
===============================================================================================================
LEETCODE133
给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。

示例：
输入：
{"$id":"1","neighbors":[{"$id":"2","neighbors":[{"$ref":"1"},{"$id":"3","neighbors":[{"$ref":"2"},{"$id":"4","neighbors":[{"$ref":"3"},{"$ref":"1"}],"val":4}],"val":3}],"val":2},{"$ref":"4"}],"val":1}

解释：
节点 1 的值是 1，它有两个邻居：节点 2 和 4 。
节点 2 的值是 2，它有两个邻居：节点 1 和 3 。
节点 3 的值是 3，它有两个邻居：节点 2 和 4 。
节点 4 的值是 4，它有两个邻居：节点 1 和 3 。
 

提示：
节点数介于 1 到 100 之间。
无向图是一个简单图，这意味着图中没有重复的边，也没有自环。
由于图是无向的，如果节点 p 是节点 q 的邻居，那么节点 q 也必须是节点 p 的邻居。
必须将给定节点的拷贝作为对克隆图的引用返回

解答：
class Solution:
    def __init__(self):
        self.d = dict()
    def cloneGraph(self, node):
        if node.val in self.d:
            return self.d[node.val]
        else:
            new = Node(node.val,[])
            self.d[node.val] = new
            for n in node.neighbors:
                new.neighbors.append(self.cloneGraph(n))
            return new

 
