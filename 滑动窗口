给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。
返回滑动窗口最大值。

示例:
输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
注意：
你可以假设 k 总是有效的，1 ≤ k ≤ 输入数组的大小，且输入数组不为空。

解法：
class Solution:
    def maxSlidingWindow(self, nums, k):
        if len(nums) == 0:
            return []
        res = []
        helps = self.init_window(nums,k)
        res.append(helps[0][1])
        l = 0
        r = k
        while r < len(nums):
            while len(helps)!= 0 and helps[-1][1] <= nums[r]:
                helps.pop()
            helps.append([r,nums[r]])
            if l >= helps[0][0]:
                helps.pop(0)
            res.append(helps[0][1])
            r += 1
            l += 1
        return res
            
    def init_window(self,nums,k):
        l = 0
        r = 0
        helps = []
        while r < k:
            if len(helps) == 0:
                helps.append([r,nums[r]])
                r+=1
            elif nums[r] >=helps[-1][1]:
                helps.pop()
            else:
                helps.append([r,nums[r]])
                r += 1
        return helps
===========================================================================================================
题目：
给定数组arr和整数num 返回共有多少个子数组满足：
                 max(arr[i:j]) - min(arr[i:j]) <= num
要求：时间复杂度为0(N)

解答：
def getnum(arr,num):
    if arr == None or len(arr)==0:
        return 0
    res = 0
    mins = []
    maxs = []
    left = 0
    right = 0
    while left < len(arr):
        while right <len(arr):
            while len(mins)!= 0 and arr[mins[-1]] >= arr[right]:
                mins.pop()
            mins.append(right)
            while len(maxs) != 0 and arr[maxs[-1]] <= arr[right]:
                maxs.pop()
            maxs.append(right)
            if arr[maxs[0]] - arr[mins[0]] > num:
                break
            right += 1
        if mins[0] == left:
            mins.pop(0)
        if maxs[0] == left :
            maxs.pop(0)
        res += right-left
        left += 1
    return res

=====================================================================================
LEETCODE76
给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。

示例：
输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"

说明：
如果 S 中不存这样的子串，则返回空字符串 ""。
如果 S 中存在这样的子串，我们保证它是唯一的答案。

解答：
class Solution:
    def minWindow(self, s, t):
        left = 0
        right = 0
        res = ""
        need = dict()
        for c in t:
            need[c] = need.get(c,0)+1
        window = dict()
        match = 0
        while right < len(s):
            if s[right] in t:
                window[s[right]] = window.get(s[right],0)+1
                if window[s[right]] == need[s[right]]:
                    match += 1
            right += 1
            while left <= right and  match == len(need):
                if len(res) == 0:
                    res = s[left:right]
                elif len(res) > right-left:
                    res = s[left:right]
                if s[left] in t:
                    if window[s[left]] == need[s[left]]:
                        match -= 1
                    window[s[left]] -= 1
                left += 1
        return res

方法二：
class Solution:
    def minWindow(self, s, t):
        d_t = dict()
        for c in t:
            d_t[c] = d_t.get(c,0)+1
        l = 0
        r = 0
        res = ""
        while r < len(s) or self.covered(d_t):
            if self.covered(d_t):
                if len(res) == 0:
                    res = s[l:r]
                elif len(res) > len(s[l:r]):
                    res = s[l:r]
                if s[l] in t:
                    d_t[s[l]] = d_t.get(s[l],0)+1
                l += 1
            else:
                if s[r] in t:
                    d_t[s[r]] -= 1
                r += 1
        return res

    def covered(self,d_t):
        for v in d_t.values():
            if v > 0:
                return False
        return True
        
        
        
模板：
left = 0
right = 0
window = []
while right < len(arr):
    window.append(s.[right])
    right += 1
    while (窗口满足条件）:
        window.pop(s[left])
        更新窗口条件
        left += 1
 
================================================================
LEETCODE 3
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

解答：
class Solution:
    def lengthOfLongestSubstring(self, s):
        if len(s) == 0 or s == None:
            return 0
        l = 0
        r = 0
        sets = set()
        max_len = 1
        while r < len(s):
            if s[r] not in sets:
                sets.add(s[r])
                max_len = max(max_len,len(sets))
                r += 1
            else:
                sets.remove((s[l]))
                l += 1
        return max_len

套路：
l = 0
r = 0
while r<len(s):
  if ...:
    加入 r
    r+= 1
  else:
    删掉 l
    l+=1
   

