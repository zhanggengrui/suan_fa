LEETCODE 141 环形链表
给定一个链表，判断链表中是否有环。

解答：
class Solution(object):
    def hasCycle(self, head):
        if head == None :
            return False
        f = head
        s = head
        while f.next != None and f.next.next !=None: #f指针的后面要有两个节点
            f = f.next.next
            s = s.next
            if f == s:
                return True
        return False
=================================================================================================================
LEETCODE 142 环形链表（2）
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

解答：
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None:
            return None
        f = head
        s = head
        while f.next != None and f.next.next != None:
            f = f.next.next
            s = s.next
            if f == s:         # 当相遇以后
                f = head       # f指针回到头结点，变成每次一步，
                while f!=s:    # f和s同时走，再次相遇时，就是入环的第一个节点
                    f = f.next
                    s = s.next
                return f
        return None

=================================================================================================================
LEETCODE 2
题目：两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

解答：
class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        re = ListNode(0)
        r=re
        carry=0
        while(l1 or l2):
            x= l1.val if l1 else 0
            y= l2.val if l2 else 0
            s=carry+x+y
            carry=s//10
            r.next=ListNode(s%10)
            r=r.next
            if(l1!=None):l1=l1.next
            if(l2!=None):l2=l2.next
        if(carry>0):
            r.next=ListNode(1)
        return re.next               # 返回re.head
