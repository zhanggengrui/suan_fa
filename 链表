LEETCODE 19 
给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：
给定一个链表: 1->2->3->4->5, 和 n = 2.
当删除了倒数第二个节点后，链表变为 1->2->3->5.

解答：
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        if head == None:
            return head
        prehead = ListNode(None)
        prehead.next = head
        s = prehead
        f = prehead
        for i in range(n):
            f = f.next
        while f != None and f.next!= None:
            f = f.next
            s = s.next
        s.next = s.next.next
        return prehead.next

注意：在前面加入虚拟节点很重要，这样就可以找到第一个节点的前一个节点
=================================================================================================================
LEETCODE 203 移除链表的元素
解答：
class Solution(object):
    def removeElements(self, head, val):
        prehead = ListNode(None)
        prehead.next = head
        cur = prehead
        while  cur.next != None:
            if cur.next.val == val:
                cur.next = cur.next.next      # 链表增删操作之后不要动指针
            else:
                cur = cur.next
        return prehead.next

=================================================================================================================
题目：交换链表的两个节点node1,node2
def swap_node(pre_node1,pre_node2):  #pre_node1 和pre_node2 分别是node1 和node2的前驱节点
    if pre_node1.next == pre_node2:  # 两个相邻的时候是特殊情况
        tmp1 = pre_node2.next
        tmp2 = pre_node2.next.next
        pre_node1.next = tmp1
        tmp1.next = pre_node2
        pre_node2.next = tmp2
    else:
        tmp1 = pre_node1.next
        tmp2 = pre_node1.next.next
        tmp3 = pre_node2.next
        tmp4 = pre_node2.next.next
        pre_node1.next = tmp3
        tmp3.next = tmp2
        pre_node2.next = tmp1
        tmp1.next = tmp4

=================================================================================================================
LEETCODE 206 反转链表
解法一：三指针法：
class Solution(object):
    def reverseList(self, head):
        if head == None or head.next == None:
            return head
        pre = head
        cur = pre.next
        nex = cur.next
        while cur.next != None:
            cur.next = pre
            pre = cur 
            cur = nex
            nex = nex.next
        cur.next = pre
        head.next = None
        return cur
        
 解法二：双指针法
 class Solution(object):
    def reverseList(self, head):
        pre, cur = None ,head
        while cur != None:
            cur.next,pre,cur = pre,cur,cur.next
        return pre

解法三：栈
class Solution:
    def reverseList(self, head):
        stack = []
        cur = head
        while cur != None:
            stack.append(cur)
            cur = cur.next
        prehead = ListNode(None)
        cur = prehead
        while len(stack) != 0:
            cur.next = stack.pop()
            cur = cur.next
        cur.next = None
        return prehead.next
=================================================================================================================
LEETCODE 141 环形链表
给定一个链表，判断链表中是否有环。

解答：
class Solution(object):
    def hasCycle(self, head):
        if head == None :
            return False
        f = head
        s = head
        while f.next != None and f.next.next !=None: #f指针的后面要有两个节点
            f = f.next.next
            s = s.next
            if f == s:
                return True
        return False
=================================================================================================================
LEETCODE 142 环形链表（2）
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

解答：
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None:
            return None
        f = head
        s = head
        while f.next != None and f.next.next != None:
            f = f.next.next
            s = s.next
            if f == s:         # 当相遇以后
                f = head       # f指针回到头结点，变成每次一步，
                while f!=s:    # f和s同时走，再次相遇时，就是入环的第一个节点
                    f = f.next
                    s = s.next
                return f
        return None

=================================================================================================================
题目：
判断一个链表是否为回文链表，要求空间复杂度为O（1）
def IsPalindromeList(head):
    if head == None or head.next == None:
        return True
    f = head
    s = head
    while f.next != None and f.next.next!= None:
        f = f.next.next
        s = s.next
    mid = s #当链表为奇数时，s在正中间；当链表为偶数时，s在中间的前面一个节点
    head2 = reverseList(mid)  # 反转以mid为头节点的链表
    head1 = head
    cur1 = head1
    cur2 = head2
    res = True
    while cur1 != None and cur2 != None:   #两个链表有一个走完就停
        if cur1.val != cur2.val :
            res = False
            return res
        cur1 = cur1.next
        cur2 = cur2.next
    # 再恢复原链表
    reverseList(head2)
    return res
=================================================================================================================
题目：复制一个含有rand指针的链表

解法一：哈希表法 时间O（N）,空间O(N)
def copy_list_with_rand1(head):
    if head == None:
        return None
    d = dict()
    cur = head
    while cur!= None:
        d[cur] = ListNode(cur.val)
        cur = cur.next
    d[None] = None
    cur = head
    while cur != None:
        d[cur].next = d[cur.next]
        d[cur].rand = d[cur.rand]
        cur = cur.next
    return d[head]
    
解法二：时间(N),空间O(1)
class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if head == None:
            return None
        cur = head
        while cur != None:
            tmp = cur.next
            cur.next = Node(cur.val,None,None)
            cur = cur.next 
            cur.next = tmp
            cur = cur.next
        cur = head
        res = head.next
        # 先改random指针
        while cur != None:
            copyright = cur.next
            nex = cur.next.next
            copyright.random = None if cur.random == None else cur.random.next
            cur = nex
        cur = head
        #再改next指针
        while cur != None:
            copyright = cur.next
            nex = cur.next.next
            cur.next =nex
            copyright.next = None if nex == None else nex.next
            cur = nex
        return res

=================================================================================================================
LEETCODE 2
题目：两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

解答：
class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        re = ListNode(0)
        r=re
        carry=0
        while(l1 or l2):
            x= l1.val if l1 else 0
            y= l2.val if l2 else 0
            s=carry+x+y
            carry=s//10
            r.next=ListNode(s%10)
            r=r.next
            if(l1!=None):l1=l1.next
            if(l2!=None):l2=l2.next
        if(carry>0):
            r.next=ListNode(1)
        return re.next               # 返回re.head
